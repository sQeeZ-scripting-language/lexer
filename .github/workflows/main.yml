name: sQeeZ-Lexer-CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  compile_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y g++ make cmake clang-format python3-pip

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install gcc cmake clang-format python

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

    - name: Check code style
      shell: bash
      run: |
        function run_clang_format {
          local file=$1
          local result=$(clang-format -style=file -output-replacements-xml "$file")
          local replacements=$(echo "$result" | grep -o "<replacement " | wc -l)
          if [ "$replacements" -ne 0 ]; then
            echo "Code style issues found in file: $file"
            clang-format -style=file "$file" | diff "$file" - | colordiff
            echo "Number of replacements: $replacements"
            return 1
          fi
        }

        echo "Running clang-format..."
        clang_format_failed=0
        for file in $(find . -name '*.cpp' -o -name '*.hpp'); do
          if ! run_clang_format "$file"; then
            clang_format_failed=1
          fi
        done

        if [[ $clang_format_failed -ne 0 ]]; then
          echo "clang-format check failed."
          exit 1
        fi

    - name: Build
      run: |
        mkdir build
        cd build
        cmake ..
        cmake --build .

    - name: Run tests
      run: |
        cd build/test
        ctest

  release:
    runs-on: ubuntu-latest
    needs: compile_and_test
    steps:
      - name: Create release artifact
        run: echo ls

      - name: Upload Release Asset
        uses: actions/upload-artifact@v2
        with:
          name: sQeeZ-Lexer-${{ github.run_number }}.zip
          path: release/sQeeZ-Lexer-${{ github.run_number }}.zip

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload release asset to GitHub
        uses: ncipollo/release-action@v1
        with:
          files: release/sQeeZ-Lexer-${{ github.run_number }}.zip